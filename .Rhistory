parms = pars,
times = times,
method = "rk4"
)
return(as.data.frame(out))
}
momos <- function (params = NULL) {
# Check if params are a list
if(is.list(params)) {
for(i in params) {
if(!is.numeric(i)) {
message("All elements must be numeric")
return(NA)
}
}
} else {
if(!is.null(params)) {
message("Parameters must be a list")
return(NA)
}
}
# Initial values
Necromasa <- ifelse("Necromasa" %in% names(params), params$Necromasa, 2140)
HLo <- ifelse("HLo" %in% names(params), params$HLo, 2250)
HSo <- ifelse("HSo" %in% names(params), params$HSo, 19150)
Co <- ifelse("Co" %in% names(params), params$Co, 55.40)
# Parameters of the MOMOS model
Kvl <- ifelse("Kvl" %in% names(params), params$Kvl, 0.2070)
Kvs <- ifelse("Kvs" %in% names(params), params$Kvs, 0.00057)
fs <- ifelse("fs" %in% names(params), params$fs, 0.00002)
Khl <- ifelse("Khl" %in% names(params), params$Khl, 0.0638)
Khs <- ifelse("Khs" %in% names(params), params$Khs, 0.00077)
Khls <- ifelse("Khls" %in% names(params), params$Khls, 0.1581)
Kmb <- ifelse("Kmb" %in% names(params), params$Kmb, 0.001)
Kresp <- ifelse("Kresp" %in% names(params), params$Kresp, 0.1419)
Ci <- ifelse("Ci" %in% names(params), params$Ci, 50.04)
# Execution time
from <- ifelse("from" %in% names(params), params$from, 0)
to <- ifelse("to" %in% names(params), params$to, 30)
by <- ifelse("by" %in% names(params), params$by, 1)
# Derivs
derivs <- function(time, y, pars) {
with (as.list(c(pars, y)), {
Fvl <- VL * Kvl
Fvs <- VS * Kvs
Fmor <- CM * Kmb
Resp <- CM * CM * Kresp / Co
Fhl <- HL * Khl
Fhls <- HL * Khls
Fhs <- HS * Khs
dVL <- -Fvl
dVS <- -Fvs
dCM <- Fvl + Fvs - Fmor - Resp + Fhl + Fhs
dHL <- Fmor - Fhl - Fhls
dHS <- Fhls - Fhs
dRA <- Resp
return (list(c(dVL,  dVS, dCM, dHL, dHS, dRA)))
})
}
# Set params
pars <- c(
Kvl <- Kvl,
Kvs <- Kvs,
fs <- fs,
Khl <- Khl,
Khs <- Khs,
Khls <- Khls,
Kmb <- Kmb,
Kresp <- Kresp,
Ci <- Ci
)
Co <- Co
HLo <- HLo
HSo <- HSo
Necromasa <- Necromasa
# Integral
y <- c(
VL = Necromasa * (1 - fs),
VS = Necromasa * fs,
CM = Ci,
HL = HLo,
HS = HSo,
RA = 0
)
# Execution time
times <- seq(from = from, to = to, by = by)
library(deSolve)
out <- ode(
func = derivs,
y = y,
parms = pars,
times = times,
method = "rk4"
)
plot(out)
return(as.data.frame(out))
}
momos()
momos <- function (params = NULL) {
# Check if params are a list
if(is.list(params)) {
for(i in params) {
if(!is.numeric(i)) {
message("All elements must be numeric")
return(NA)
}
}
} else {
if(!is.null(params)) {
message("Parameters must be a list")
return(NA)
}
}
# Initial values
Necromasa <- ifelse("Necromasa" %in% names(params), params$Necromasa, 2140)
HLo <- ifelse("HLo" %in% names(params), params$HLo, 2250)
HSo <- ifelse("HSo" %in% names(params), params$HSo, 19150)
Co <- ifelse("Co" %in% names(params), params$Co, 55.40)
# Parameters of the MOMOS model
Kvl <- ifelse("Kvl" %in% names(params), params$Kvl, 0.2070)
Kvs <- ifelse("Kvs" %in% names(params), params$Kvs, 0.00057)
fs <- ifelse("fs" %in% names(params), params$fs, 0.00002)
Khl <- ifelse("Khl" %in% names(params), params$Khl, 0.0638)
Khs <- ifelse("Khs" %in% names(params), params$Khs, 0.00077)
Khls <- ifelse("Khls" %in% names(params), params$Khls, 0.1581)
Kmb <- ifelse("Kmb" %in% names(params), params$Kmb, 0.001)
Kresp <- ifelse("Kresp" %in% names(params), params$Kresp, 0.1419)
Ci <- ifelse("Ci" %in% names(params), params$Ci, 50.04)
# Execution time
from <- ifelse("from" %in% names(params), params$from, 0)
to <- ifelse("to" %in% names(params), params$to, 120)
by <- ifelse("by" %in% names(params), params$by, 1)
# Derivs
derivs <- function(time, y, pars) {
with (as.list(c(pars, y)), {
Fvl <- VL * Kvl
Fvs <- VS * Kvs
Fmor <- CM * Kmb
Resp <- CM * CM * Kresp / Co
Fhl <- HL * Khl
Fhls <- HL * Khls
Fhs <- HS * Khs
dVL <- -Fvl
dVS <- -Fvs
dCM <- Fvl + Fvs - Fmor - Resp + Fhl + Fhs
dHL <- Fmor - Fhl - Fhls
dHS <- Fhls - Fhs
dRA <- Resp
return (list(c(dVL,  dVS, dCM, dHL, dHS, dRA)))
})
}
# Set params
pars <- c(
Kvl <- Kvl,
Kvs <- Kvs,
fs <- fs,
Khl <- Khl,
Khs <- Khs,
Khls <- Khls,
Kmb <- Kmb,
Kresp <- Kresp,
Ci <- Ci
)
Co <- Co
HLo <- HLo
HSo <- HSo
Necromasa <- Necromasa
# Integral
y <- c(
VL = Necromasa * (1 - fs),
VS = Necromasa * fs,
CM = Ci,
HL = HLo,
HS = HSo,
RA = 0
)
# Execution time
times <- seq(from = from, to = to, by = by)
library(deSolve)
out <- ode(
func = derivs,
y = y,
parms = pars,
times = times,
method = "rk4"
)
plot(out)
return(as.data.frame(out))
}
momos()
momos <- function (params = NULL) {
# Check if params are a list
if(is.list(params)) {
for(i in params) {
if(!is.numeric(i)) {
message("All elements must be numeric")
return(NA)
}
}
} else {
if(!is.null(params)) {
message("Parameters must be a list")
return(NA)
}
}
# Initial values
Necromasa <- ifelse("Necromasa" %in% names(params), params$Necromasa, 2140)
HLo <- ifelse("HLo" %in% names(params), params$HLo, 2250)
HSo <- ifelse("HSo" %in% names(params), params$HSo, 19150)
Co <- ifelse("Co" %in% names(params), params$Co, 55.40)
# Parameters of the MOMOS model
Kvl <- ifelse("Kvl" %in% names(params), params$Kvl, 0.2070)
Kvs <- ifelse("Kvs" %in% names(params), params$Kvs, 0.00057)
fs <- ifelse("fs" %in% names(params), params$fs, 0.00002)
Khl <- ifelse("Khl" %in% names(params), params$Khl, 0.0638)
Khs <- ifelse("Khs" %in% names(params), params$Khs, 0.00077)
Khls <- ifelse("Khls" %in% names(params), params$Khls, 0.1581)
Kmb <- ifelse("Kmb" %in% names(params), params$Kmb, 0.001)
Kresp <- ifelse("Kresp" %in% names(params), params$Kresp, 0.1419)
Ci <- ifelse("Ci" %in% names(params), params$Ci, 50.04)
# Execution time
from <- ifelse("from" %in% names(params), params$from, 0)
to <- ifelse("to" %in% names(params), params$to, 300)
by <- ifelse("by" %in% names(params), params$by, 1)
# Derivs
derivs <- function(time, y, pars) {
with (as.list(c(pars, y)), {
Fvl <- VL * Kvl
Fvs <- VS * Kvs
Fmor <- CM * Kmb
Resp <- CM * CM * Kresp / Co
Fhl <- HL * Khl
Fhls <- HL * Khls
Fhs <- HS * Khs
dVL <- -Fvl
dVS <- -Fvs
dCM <- Fvl + Fvs - Fmor - Resp + Fhl + Fhs
dHL <- Fmor - Fhl - Fhls
dHS <- Fhls - Fhs
dRA <- Resp
return (list(c(dVL,  dVS, dCM, dHL, dHS, dRA)))
})
}
# Set params
pars <- c(
Kvl <- Kvl,
Kvs <- Kvs,
fs <- fs,
Khl <- Khl,
Khs <- Khs,
Khls <- Khls,
Kmb <- Kmb,
Kresp <- Kresp,
Ci <- Ci
)
Co <- Co
HLo <- HLo
HSo <- HSo
Necromasa <- Necromasa
# Integral
y <- c(
VL = Necromasa * (1 - fs),
VS = Necromasa * fs,
CM = Ci,
HL = HLo,
HS = HSo,
RA = 0
)
# Execution time
times <- seq(from = from, to = to, by = by)
library(deSolve)
out <- ode(
func = derivs,
y = y,
parms = pars,
times = times,
method = "rk4"
)
plot(out)
return(as.data.frame(out))
}
momos()
momos <- function (params = NULL) {
# Check if params are a list
if(is.list(params)) {
for(i in params) {
if(!is.numeric(i)) {
message("All elements must be numeric")
return(NA)
}
}
} else {
if(!is.null(params)) {
message("Parameters must be a list")
return(NA)
}
}
# Initial values
Necromasa <- ifelse("Necromasa" %in% names(params), params$Necromasa, 2140)
HLo <- ifelse("HLo" %in% names(params), params$HLo, 2250)
HSo <- ifelse("HSo" %in% names(params), params$HSo, 19150)
Co <- ifelse("Co" %in% names(params), params$Co, 55.40)
# Parameters of the MOMOS model
Kvl <- ifelse("Kvl" %in% names(params), params$Kvl, 0.2070)
Kvs <- ifelse("Kvs" %in% names(params), params$Kvs, 0.00057)
fs <- ifelse("fs" %in% names(params), params$fs, 0.00002)
Khl <- ifelse("Khl" %in% names(params), params$Khl, 0.0638)
Khs <- ifelse("Khs" %in% names(params), params$Khs, 0.00077)
Khls <- ifelse("Khls" %in% names(params), params$Khls, 0.1581)
Kmb <- ifelse("Kmb" %in% names(params), params$Kmb, 0.001)
Kresp <- ifelse("Kresp" %in% names(params), params$Kresp, 0.1419)
Ci <- ifelse("Ci" %in% names(params), params$Ci, 50.04)
# Execution time
from <- ifelse("from" %in% names(params), params$from, 0)
to <- ifelse("to" %in% names(params), params$to, 30)
by <- ifelse("by" %in% names(params), params$by, 1)
# Derivs
derivs <- function(time, y, pars) {
with (as.list(c(pars, y)), {
Fvl <- VL * Kvl
Fvs <- VS * Kvs
Fmor <- CM * Kmb
Resp <- CM * CM * Kresp / Co
Fhl <- HL * Khl
Fhls <- HL * Khls
Fhs <- HS * Khs
dVL <- -Fvl
dVS <- -Fvs
dCM <- Fvl + Fvs - Fmor - Resp + Fhl + Fhs
dHL <- Fmor - Fhl - Fhls
dHS <- Fhls - Fhs
dRA <- Resp
return (list(c(dVL,  dVS, dCM, dHL, dHS, dRA)))
})
}
# Set params
pars <- c(
Kvl <- Kvl,
Kvs <- Kvs,
fs <- fs,
Khl <- Khl,
Khs <- Khs,
Khls <- Khls,
Kmb <- Kmb,
Kresp <- Kresp,
Ci <- Ci
)
Co <- Co
HLo <- HLo
HSo <- HSo
Necromasa <- Necromasa
# Integral
y <- c(
VL = Necromasa * (1 - fs),
VS = Necromasa * fs,
CM = Ci,
HL = HLo,
HS = HSo,
RA = 0
)
# Execution time
times <- seq(from = from, to = to, by = by)
library(deSolve)
out <- ode(
func = derivs,
y = y,
parms = pars,
times = times,
method = "rk4"
)
plot(out)
return(as.data.frame(out))
}
momos()
install.packages("pander")
x <- 1.3
y <- "hello"
a <- x
a
x -> b
b
a
x <- a <- b
a
x = a
x <<- 2
x
x
hist(2)
plot(1:4, c(3,4,3,6), type=“l”, col=“red”)
plot(1:4, c(3,4,3,6), type="l", col="red")
x <- 1:20
x
y <- matrix(x, nrow=5, ncol=4)
y
plot(y)
as.vector(y)
x <- matrix(1:20, nrow=5, ncol=4, byrow=TRUE)
x
x <- t(x)
x
L1 <- list(a=1:10, b=c(1,2,3), x="hello")
L1
L2 <- list(a=5:7, b=L1)
str(L2)
x <- c(a=1.2, b=2.3, c=6)
x
L <- list(a=1:3, b="hello")
L
names(L)
names(L) <- c("numbers", "text")
names(L)
x <- 1:5
x
names(x) <- letters[1:5]
x
plot.default
?plot.default
?par
r  <- 0.5
N0 <- 10
dt <- 0.1
time <- seq(0, 10, dt)
# analytical solution
N <- N0 * exp(r * time)
plot(time, N, type="l")
N <- numeric(length(time))
N[1] <- N0
for (i in 2:length(time)) {
N[i] <- N[i-1] + r * N[i-1] * dt
}
plot(time, N, type = "l")
library(deSolve)
model <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dN <-   r * N
list(c(dN))
})
}
y0     <- c(N = 0.1)
parms  <- c(r = 0.1, K = 10)
times  <- seq(0, 100, 1)
out <- ode(y0, times, model, parms) # <---
plot(out)
library(deSolve)
model <- function (time, y, parms) {
with(as.list(c(y, parms)), {
dN <-   r * N * (1 - N / K)
list(c(dN))
})
}
y0     <- c(N = 0.1)
parms  <- c(r = 0.1, K = 10)
times  <- seq(0, 100, 1)
out <- ode(y0, times, model, parms) # <---
plot(out)
install.packages("growthrates")
install.packages("growthrates")
install.packages("growthrates")
install.packages("growthrates")
install.packages("growthrates")
data(bactgrowth)
library("growthrates")
data(bactgrowth)
force(bactgrowth)
dat <- multisplit(value ~ time | strain + conc + replicate, data = bactgrowth)[["D:0:1"]]
fit0 <- fit_spline(dat$time, dat$value)
View(fit0)
fit0
fit1 <- all_splines(value ~ time | strain + conc + replicate, data = bactgrowth, spar = 0.5)
fit1
results1 <- results(fit1)
p <- c(coef(fit0), K = max(dat$value))
lower = c(y0 = 0, mumax = 0, K = 0)
fit2 <- all_growthmodels(value ~ time | strain + conc + replicate,
data = bactgrowth, FUN=grow_logistic, p = p, lower = lower, ncores = 2)
results2 <- results(fit2)
pdf("all_plots.pdf", width=12, height=64)
par(mfrow=c(24,3))
plot(fit2)
plot(fit2)
dev.off()
x <- seq(5, 100, 5)
y <- c(0.1, 2.2, 3.1, 1.5, 8.9, 8, 8.4, 9.8, 9.3, 10.6, 12, 13.6,
13.1, 13.3, 11.6, 14.7, 12.6, 11.9, 10.9, 9.4)
plot(x,y)
# differential equations (ODE)
ode_K_exp <- function (time, init, parms, ...) {
with(as.list(c(parms, init)), {
dy <- mumax * y * (1 - y/K)
dK <- d_K * K
list(c(dy, dK), log_y = unname(log(y)))
})
}
# numerical solution
grow_K_exp <- function(time, parms, ...) {
init    <- parms[c("y0", "K")]            # initial values
names(init) <- c("y", "K")                # force names of state variables
odeparms <- parms[c("mumax", "d_K")]      # the parms of the ODE model
out <- ode(init, time, ode_K_exp, parms = odeparms)
out
}
## optional: make it a "growthmodel" for the package
grow_K_exp <- growthmodel(grow_K_exp, pnames = c("y0", "K", "mumax", "d_K"))
head(grow_K_exp(time = 1:10, c(y0 = .1, K = 1, mumax = 0.1, d_K = -0.02)))
fit <- fit_growthmodel(grow_K_exp,
p = c(y0 = 0.1, mumax = 0.1, K = 20, d_K = -0.01), time = x, y = y)
growthrates::summary(fit)
plot(fit)
install.packages(c("colorspace", "curl", "dplyr", "gert", "ggplot2", "insight", "mime", "rmarkdown", "testthat", "xfun"))
cls
data <- rbind(data, new_record)
