fs <- fs,
Khl <- Khl,
Khs <- Khs,
Khls <- Khls,
Kmb <- Kmb,
Kresp <- Kresp,
Ci <- Ci
)
Co <- Co
HLo <- HLo
HSo <- HSo
Necromasa <- Necromasa
# Integral
y <- c(
VL = Necromasa * (1 - fs),
VS = Necromasa * fs,
CM = Ci,
HL = HLo,
HS = HSo,
RA = 0
)
# Execution time
times <- seq(from = from, to = to, by = by)
library(deSolve)
out <- ode(
func = derivs,
y = y,
parms = pars,
times = times,
method = "rk4"
)
plot(out)
return(as.data.frame(out))
}
momos()
parms=c(kResp=0.50)
fitval=nls.lm(par=parms,fn=ssq)
ssq=function(params){
# Time points for which values is experimental
# Include the points where data is available
# Execution time
from <- ifelse("from" %in% names(params), params$from, 1)
to <- ifelse("to" %in% names(params), params$to, 30)
by <- ifelse("by" %in% names(params), params$by, 1)
t=c(seq(from, to, by),experimental_data$time)
t=sort(unique(t))
# parameters from the parameter estimation routine
Kresp=parms[1]
# Solve the model
out_func=momos(list(Kresp))
out_func=out_func[,c("time","CM","RA")]
# Filter data that contains time points where data is available
outdf=data.frame(out_func)
outdf=outdf[outdf$time %in% experimental_data$time,]
# Evaluate predicted vs experimental residual
preddf=melt(outdf,id.var="time",variable.name="variables",value.name="values")
expdf=melt(experimental_data,id.var="time",variable.name="variables",value.name="values")
ssqres=preddf$values-expdf$values
return(ssqres)
}
parms=c(kResp=0.50)
fitval=nls.lm(par=parms,fn=ssq)
summary(fitval)
fitval=nls.lm(par=parms,fn=ssq)
summary(fitval)
fitval
momos <- function (params = NULL) {
# Check if params are a list
if(is.list(params)) {
for(i in params) {
if(!is.numeric(i)) {
message("All elements must be numeric")
return(NA)
}
}
} else {
if(!is.null(params)) {
message("Parameters must be a list")
return(NA)
}
}
# Initial values
Necromasa <- ifelse("Necromasa" %in% names(params), params$Necromasa, 2140)
HLo <- ifelse("HLo" %in% names(params), params$HLo, 2250)
HSo <- ifelse("HSo" %in% names(params), params$HSo, 19150)
Co <- ifelse("Co" %in% names(params), params$Co, 55.40)
# Parameters of the MOMOS model
Kvl <- ifelse("Kvl" %in% names(params), params$Kvl, 0.2070)
Kvs <- ifelse("Kvs" %in% names(params), params$Kvs, 0.00057)
fs <- ifelse("fs" %in% names(params), params$fs, 0.00002)
Khl <- ifelse("Khl" %in% names(params), params$Khl, 0.0638)
Khs <- ifelse("Khs" %in% names(params), params$Khs, 0.00077)
Khls <- ifelse("Khls" %in% names(params), params$Khls, 0.1581)
Kmb <- ifelse("Kmb" %in% names(params), params$Kmb, 0.001)
Kresp <- ifelse("Kresp" %in% names(params), params$Kresp, 0.1419)
Ci <- ifelse("Ci" %in% names(params), params$Ci, 50.04)
# Execution time
from <- ifelse("from" %in% names(params), params$from, 1)
to <- ifelse("to" %in% names(params), params$to, 30)
by <- ifelse("by" %in% names(params), params$by, 1)
# Derivs
derivs <- function(time, y, pars) {
with (as.list(c(pars, y)), {
Fvl <- VL * Kvl
Fvs <- VS * Kvs
Fmor <- CM * Kmb
Resp <- CM * CM * Kresp / Co
Fhl <- HL * Khl
Fhls <- HL * Khls
Fhs <- HS * Khs
dVL <- -Fvl
dVS <- -Fvs
dCM <- Fvl + Fvs - Fmor - Resp + Fhl + Fhs
dHL <- Fmor - Fhl - Fhls
dHS <- Fhls - Fhs
dRA <- Resp
return (list(c(dVL,  dVS, dCM, dHL, dHS, dRA)))
})
}
# Set params
pars <- c(
Kvl <- Kvl,
Kvs <- Kvs,
fs <- fs,
Khl <- Khl,
Khs <- Khs,
Khls <- Khls,
Kmb <- Kmb,
Kresp <- Kresp,
Ci <- Ci
)
Co <- Co
HLo <- HLo
HSo <- HSo
Necromasa <- Necromasa
# Integral
y <- c(
VL = Necromasa * (1 - fs),
VS = Necromasa * fs,
CM = Ci,
HL = HLo,
HS = HSo,
RA = 0
)
# Execution time
times <- seq(from = from, to = to, by = by)
library(deSolve)
out <- ode(
func = derivs,
y = y,
parms = pars,
times = times,
method = "rk4"
)
plot(out)
return(as.data.frame(out))
}
experimental_data
names(experimental_data)=c("time","CM","RA")
# Plot data
tmp=melt(experimental_data,id.vars=c("time"),variable.name="Variables",value.name="Values")
ggplot(data=tmp,aes(x=time,y=Values,color=Variables))+geom_point(size=2)
ssq=function(parms){
# time points for which values is experimental
# include the points where data is available
t=c(seq(1,30,1),experimental_data$time)
t=sort(unique(t))
# parameters from the parameter estimation routine
Kresp=parms[1]
Kvl=parms[2]
# solve the equation
out_func=momos(list(Kresp, Kvl))
out_func=out_func[,c("time","CM","RA")]
# Filter data that contains time points where data is available
outdf=data.frame(out_func)
outdf=outdf[outdf$time %in% experimental_data$time,]
# Evaluate predicted vs experimental residual
preddf=melt(outdf,id.var="time",variable.name="variables",value.name="values")
expdf=melt(experimental_data,id.var="time",variable.name="variables",value.name="values")
ssqres=preddf$values-expdf$values
return(ssqres)
}
parms=c(kResp=0.50)
# fitting
fitval=nls.lm(par=parms,fn=ssq)
summary(fitval)
params
params <- c(Kresp=0.1)
params
params
params$Kresp=0.1
params
parms=c(kResp=0.50)
fitval=nls.lm(par=parms,fn=ssq)
summary(fitval)
fitval
momos <- function (params = NULL) {
# Check if params are a list
if(is.list(params)) {
for(i in params) {
if(!is.numeric(i)) {
message("All elements must be numeric")
return(NA)
}
}
} else {
if(!is.null(params)) {
message("Parameters must be a list")
return(NA)
}
}
# Initial values
Necromasa <- ifelse("Necromasa" %in% names(params), params$Necromasa, 2140)
HLo <- ifelse("HLo" %in% names(params), params$HLo, 2250)
HSo <- ifelse("HSo" %in% names(params), params$HSo, 19150)
Co <- ifelse("Co" %in% names(params), params$Co, 55.40)
# Parameters of the MOMOS model
Kvl <- ifelse("Kvl" %in% names(params), params$Kvl, 0.2070)
Kvs <- ifelse("Kvs" %in% names(params), params$Kvs, 0.00057)
fs <- ifelse("fs" %in% names(params), params$fs, 0.00002)
Khl <- ifelse("Khl" %in% names(params), params$Khl, 0.0638)
Khs <- ifelse("Khs" %in% names(params), params$Khs, 0.00077)
Khls <- ifelse("Khls" %in% names(params), params$Khls, 0.1581)
Kmb <- ifelse("Kmb" %in% names(params), params$Kmb, 0.001)
Kresp <- ifelse("Kresp" %in% names(params), params$Kresp, 0.1419)
Ci <- ifelse("Ci" %in% names(params), params$Ci, 50.04)
# Execution time
from <- ifelse("from" %in% names(params), params$from, 1)
to <- ifelse("to" %in% names(params), params$to, 30)
by <- ifelse("by" %in% names(params), params$by, 1)
# Derivs
derivs <- function(time, y, pars) {
with (as.list(c(pars, y)), {
Fvl <- VL * Kvl
Fvs <- VS * Kvs
Fmor <- CM * Kmb
Resp <- CM * CM * Kresp / Co
Fhl <- HL * Khl
Fhls <- HL * Khls
Fhs <- HS * Khs
dVL <- -Fvl
dVS <- -Fvs
dCM <- Fvl + Fvs - Fmor - Resp + Fhl + Fhs
dHL <- Fmor - Fhl - Fhls
dHS <- Fhls - Fhs
dRA <- Resp
return (list(c(dVL,  dVS, dCM, dHL, dHS, dRA)))
})
}
# Set params
pars <- c(
Kvl <- Kvl,
Kvs <- Kvs,
fs <- fs,
Khl <- Khl,
Khs <- Khs,
Khls <- Khls,
Kmb <- Kmb,
Kresp <- Kresp,
Ci <- Ci
)
Co <- Co
HLo <- HLo
HSo <- HSo
Necromasa <- Necromasa
# Integral
y <- c(
VL = Necromasa * (1 - fs),
VS = Necromasa * fs,
CM = Ci,
HL = HLo,
HS = HSo,
RA = 0
)
# Execution time
times <- seq(from = from, to = to, by = by)
library(deSolve)
out <- ode(
func = derivs,
y = y,
parms = pars,
times = times,
method = "rk4"
)
plot(out)
return(as.data.frame(out))
}
tmp=melt(real_data,id.vars=c("time"),variable.name="variables",value.name="values")
ggplot(data=tmp,aes(x=time,y=values,color=variables))+geom_point(size=3)
ssq=function(parms){
# time points for which values is reported
# include the points where data is available
t=c(seq(1,30,1),real_data$time)
t=sort(unique(t))
# parameters from the parameter estimation routine
k1=parms[1]
# solve the equation
out_func=momos(list(Kresp=k1))
out_func=out_func[,c("time","CM","RA")]
# Filter data that contains time points where data is available
outdf=data.frame(out_func)
outdf=outdf[outdf$time %in% real_data$time,]
# Evaluate predicted vs experimental residual
preddf=melt(outdf,id.var="time",variable.name="variables",value.name="values")
expdf=melt(real_data,id.var="time",variable.name="variables",value.name="values")
ssqres=preddf$values-expdf$values
return(ssqres)
}
# parameter fitting using levenberg marquart algorithm
# initial guess for parameters
parms=c(kResp=0.50)
# fitting
fitval=nls.lm(par=parms,fn=ssq)
summary(fitval)
momos <- function (params = NULL) {
# Check if params are a list
if(is.list(params)) {
for(i in params) {
if(!is.numeric(i)) {
message("All elements must be numeric")
return(NA)
}
}
} else {
if(!is.null(params)) {
message("Parameters must be a list")
return(NA)
}
}
# Initial values
Necromasa <- ifelse("Necromasa" %in% names(params), params$Necromasa, 2140)
HLo <- ifelse("HLo" %in% names(params), params$HLo, 2250)
HSo <- ifelse("HSo" %in% names(params), params$HSo, 19150)
Co <- ifelse("Co" %in% names(params), params$Co, 55.40)
# Parameters of the MOMOS model
Kvl <- ifelse("Kvl" %in% names(params), params$Kvl, 0.2070)
Kvs <- ifelse("Kvs" %in% names(params), params$Kvs, 0.00057)
fs <- ifelse("fs" %in% names(params), params$fs, 0.00002)
Khl <- ifelse("Khl" %in% names(params), params$Khl, 0.0638)
Khs <- ifelse("Khs" %in% names(params), params$Khs, 0.00077)
Khls <- ifelse("Khls" %in% names(params), params$Khls, 0.1581)
Kmb <- ifelse("Kmb" %in% names(params), params$Kmb, 0.001)
Kresp <- ifelse("Kresp" %in% names(params), params$Kresp, 0.1419)
Ci <- ifelse("Ci" %in% names(params), params$Ci, 50.04)
# Execution time
from <- ifelse("from" %in% names(params), params$from, 1)
to <- ifelse("to" %in% names(params), params$to, 30)
by <- ifelse("by" %in% names(params), params$by, 1)
# Derivs
derivs <- function(time, y, pars) {
with (as.list(c(pars, y)), {
Fvl <- VL * Kvl
Fvs <- VS * Kvs
Fmor <- CM * Kmb
Resp <- CM * CM * Kresp / Co
Fhl <- HL * Khl
Fhls <- HL * Khls
Fhs <- HS * Khs
dVL <- -Fvl
dVS <- -Fvs
dCM <- Fvl + Fvs - Fmor - Resp + Fhl + Fhs
dHL <- Fmor - Fhl - Fhls
dHS <- Fhls - Fhs
dRA <- Resp
return (list(c(dVL,  dVS, dCM, dHL, dHS, dRA)))
})
}
momos <- function (params = NULL) {
# Check if params are a list
if(is.list(params)) {
for(i in params) {
if(!is.numeric(i)) {
message("All elements must be numeric")
return(NA)
}
}
} else {
if(!is.null(params)) {
message("Parameters must be a list")
return(NA)
}
}
# Initial values
Necromasa <- ifelse("Necromasa" %in% names(params), params$Necromasa, 2140)
HLo <- ifelse("HLo" %in% names(params), params$HLo, 2250)
HSo <- ifelse("HSo" %in% names(params), params$HSo, 19150)
Co <- ifelse("Co" %in% names(params), params$Co, 55.40)
# Parameters of the MOMOS model
Kvl <- ifelse("Kvl" %in% names(params), params$Kvl, 0.2070)
Kvs <- ifelse("Kvs" %in% names(params), params$Kvs, 0.00057)
fs <- ifelse("fs" %in% names(params), params$fs, 0.00002)
Khl <- ifelse("Khl" %in% names(params), params$Khl, 0.0638)
Khs <- ifelse("Khs" %in% names(params), params$Khs, 0.00077)
Khls <- ifelse("Khls" %in% names(params), params$Khls, 0.1581)
Kmb <- ifelse("Kmb" %in% names(params), params$Kmb, 0.001)
Kresp <- ifelse("Kresp" %in% names(params), params$Kresp, 0.1419)
Ci <- ifelse("Ci" %in% names(params), params$Ci, 50.04)
# Execution time
from <- ifelse("from" %in% names(params), params$from, 1)
to <- ifelse("to" %in% names(params), params$to, 30)
by <- ifelse("by" %in% names(params), params$by, 1)
# Derivs
derivs <- function(time, y, pars) {
with (as.list(c(pars, y)), {
Fvl <- VL * Kvl
Fvs <- VS * Kvs
Fmor <- CM * Kmb
Resp <- CM * CM * Kresp / Co
Fhl <- HL * Khl
Fhls <- HL * Khls
Fhs <- HS * Khs
dVL <- -Fvl
dVS <- -Fvs
dCM <- Fvl + Fvs - Fmor - Resp + Fhl + Fhs
dHL <- Fmor - Fhl - Fhls
dHS <- Fhls - Fhs
dRA <- Resp
return (list(c(dVL,  dVS, dCM, dHL, dHS, dRA)))
})
}
# Set params
pars <- c(
Kvl <- Kvl,
Kvs <- Kvs,
fs <- fs,
Khl <- Khl,
Khs <- Khs,
Khls <- Khls,
Kmb <- Kmb,
Kresp <- Kresp,
Ci <- Ci
)
Co <- Co
HLo <- HLo
HSo <- HSo
Necromasa <- Necromasa
# Integral
y <- c(
VL = Necromasa * (1 - fs),
VS = Necromasa * fs,
CM = Ci,
HL = HLo,
HS = HSo,
RA = 0
)
# Execution time
times <- seq(from = from, to = to, by = by)
library(deSolve)
out <- ode(
func = derivs,
y = y,
parms = pars,
times = times,
method = "rk4"
)
plot(out)
return(as.data.frame(out))
}
# plot data
tmp=melt(real_data,id.vars=c("time"),variable.name="variables",value.name="values")
ggplot(data=tmp,aes(x=time,y=values,color=variables))+geom_point(size=3)
ssq=function(parms){
# time points for which values is reported
# include the points where data is available
t=c(seq(1,30,1),real_data$time)
t=sort(unique(t))
# parameters from the parameter estimation routine
k1=parms[1]
# solve the equation
out_func=momos(list(Kresp=k1))
out_func=out_func[,c("time","CM","RA")]
# Filter data that contains time points where data is available
outdf=data.frame(out_func)
outdf=outdf[outdf$time %in% real_data$time,]
# Evaluate predicted vs experimental residual
preddf=melt(outdf,id.var="time",variable.name="variables",value.name="values")
expdf=melt(real_data,id.var="time",variable.name="variables",value.name="values")
ssqres=preddf$values-expdf$values
return(ssqres)
}
parms=c(kResp=0.50)
# fitting
fitval=nls.lm(par=parms,fn=ssq)
summary(fitval)
summary(fitval)
fitval
ssq=function(parms){
# time points for which values is reported
# include the points where data is available
t=c(seq(1,30,1),real_data$time)
t=sort(unique(t))
# parameters from the parameter estimation routine
k1=parms[1]
# solve the equation
out_func=momos(list(Kresp=k1))
out_func=out_func[,c("time","CM","RA")]
# Filter data that contains time points where data is available
outdf=data.frame(out_func)
outdf=outdf[outdf$time %in% real_data$time,]
# Evaluate predicted vs experimental residual
preddf=melt(outdf,id.var="time",variable.name="variables",value.name="values")
expdf=melt(real_data,id.var="time",variable.name="variables",value.name="values")
ssqres=preddf$values-expdf$values
return(ssqres)
}
parms=c(kResp=0.50)
parms
parms
t=seq(1,30,1)
t
t=seq(1,30,1)
t
